RealTime Processing

User defined Methods for processing data:

a) Distance Over Time:
def IsDot(num1: Double, num2: Double, num3: Double, num4: Double, time: Double): Int = {
val lat1 = toRadians(num1);
val long1 = toRadians(num2);
val lat2 = toRadians(num3);
val long2 = toRadians(num4);
val dlong = long2 - long1;
val dlat = lat2 - lat1;
var ans = pow(sin(dlat / 2), 2) + cos(lat1) * cos(lat2) * pow(sin(dlong / 2), 2);
ans = 2 * asin(sqrt(ans));
val R = 6371;
ans = ans * R;
val dot = ans/time;
if(dot > 13){
return 1;
}
return 0;
}
b) Mean:

def mean(num1: Double, num2: Double, num3: Double, num4: Double, num5: Double):
Double = {
return num1+num2+num3+num4+num5/5;
}


c) Standard Deviation:

def sd(num1: Double, num2: Double, num3: Double, num4: Double, num5: Double): Double
= {
val m = num1+num2+num3+num4+num5/5
val ss = (pow((num1 - m),2)+pow((num2 - m),2)+pow((num3 - m),2)+pow((num4 -
m),2)+pow((num5 - m),2))/5;
return sqrt(ss);
}

d) Utl Ctl Parameters

def Ista(num1: Double, num2:Double, num3:Double): Int={
val utl = 2 * num1 + num2;
val ctl = 5 * num1 + num2;
if(num3 <= utl){
return 0;
}else if(num3 > ctl){
return 2;
}
return 1;
}


Spark2-Shell commands:

import org.apache.spark.sql.functions._
import org.apache.spark.sql.hive.HiveContext
import org.apache.spark.sql.{DataFrame, SQLContext, SaveMode}
import scala.math._
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions.udf
import org.apache.spark.sql.types.TimestampType
import org.apache.spark.sql.types.IntegerType
import java.util.regex.{Matcher, Pattern}
import org.apache.spark.sql.SparkSession
import org.apache.spark.streaming.{StreamingContext, Seconds}
import org.apache.spark.streaming.kafka.KafkaUtils
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.TimestampType
import org.apache.spark.sql.types.IntegerType
import org.apache.spark.sql.types.DoubleType
import org.apache.spark.sql.types.LongType
import java.sql.Timestamp

val hiveObj = new HiveContext(sc)
val bureau_data = hiveObj.sql("select * from edureka_983959.edureka_983959_bureau_data")
val merchant_data = hiveObj.sql("select * from edureka_983959.edureka_983959_merchant_data")
val zipcodes_data = hiveObj.sql("select * from edureka_983959.edureka_983959_zipcodes_data")
val card_blockList = hiveObj.sql("select * from edureka_983959.edureka_983959_card_blocklist")
val pos_blockList = hiveObj.sql("select * from edureka_983959.edureka_983959_pos_blocklist")
val transactions_data = hiveObj.sql("select * from edureka_983959.edureka_983959_transactions_data")
val dec="Declined";
val app ="Approved";
val appp = "Approval Pending"

case class pos(card_id: String, marchant_id: String, amount: Double, timestamp: Int,p_type:String, transaction_description:String, latitude: Double, longitude: Double)

val transdf = transactions_data.join(merchant_data,transactions_data("marchant_id") === merchant_data("merchant_id"),"left")
val transjoin = transdf.join(zipcodes_data,transdf("country_code") === zipcodes_data("country_code") && transdf("postal_code") === zipcodes_data("postal_code") ,"left").sort(desc("timestamp"))
def findStatus(cardid:String, user_id:String, marchant_id:String, latitude:Double,longitude:Double, time:Int, amount:Double): String={
if(card_blockList.filter($"card_id" === cardid).count > 0){return dec;};
if(pos_blockList.filter($"marchant_id" === marchant_id).count > 0){return dec;};
val transFilter = transjoin.filter($"card_id" === cardid).sort(desc("timestamp")).limit(5)
val points = transFilter.select($"latitude",$"longitude",unix_timestamp($"timestamp","dd/MM/yyyy HH:mm:ss").cast(LongType)).first
val time1 = (points(2)+"").toLong
val timediff = (time-time1)/60
var isDot = app;
import scala.math._
val lat1 = toRadians(latitude);
val long1 = toRadians(longitude);
val lat2 = toRadians((points(0)+"").toDouble);
val long2 = toRadians((points(1)+"").toDouble);
val dlong = long2 - long1;
val dlat = lat2 - lat1;
var ans = pow(sin(dlat / 2), 2) + cos(lat1) * cos(lat2) * pow(sin(dlong / 2), 2);
ans = 2 * asin(sqrt(ans));
val R = 6371;
ans = ans * R;
val dot = ans/timediff;
if(dot > 13){isDot = dec;};
val previousamounts = transFilter.agg(stddev_samp($"amount").alias("sd"),
avg($"amount").alias("average")).select($"sd",$"average").first
val standard_deviation = (previousamounts(0)+"").toDouble;
val average_amounts = (previousamounts(1)+"").toDouble;
var ista= app;
val utl = (2 * standard_deviation) + average_amounts;
val ctl = 5 * standard_deviation + average_amounts;
if(amount <= ctl && amount > utl){ista = app;}else if(amount > ctl){ista = dec;};
var isca = app;
val creditScore = bureau_data.filter($"user_id" === user_id).select($"credit_score").first
if((creditScore(0)+"").toInt<250){isca=dec};
if(isca == dec || isDot == dec || ista == dec ){ return dec;};
return ista;
}